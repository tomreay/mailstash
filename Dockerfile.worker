# Multi-stage build for Graphile Worker service with optimized layer caching

# Stage 1: Build dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files for yarn
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile

# Stage 2: Production dependencies (separate for better caching)
FROM node:20-alpine AS prod-deps
WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./

# Install production dependencies ONLY and clean cache
RUN yarn install --production --frozen-lockfile --network-timeout 100000 && \
    yarn cache clean

# Stage 3: Base runtime image with system dependencies
FROM node:20-alpine AS base
WORKDIR /app

# Install tini for proper signal handling and create user
RUN apk add --no-cache tini && \
    addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 worker

# Create storage directories with correct permissions
RUN mkdir -p /app/storage/emails /app/storage/attachments /app/tmp/mbox-uploads && \
    chown -R worker:nodejs /app/storage /app/tmp

# Stage 4: Build application code
FROM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy package files and Prisma schema first (less likely to change)
COPY package.json yarn.lock ./
COPY prisma ./prisma
COPY tsconfig.worker.json ./

# Generate Prisma Client
RUN yarn prisma generate

# Copy type definitions (changes less frequently)
COPY types ./types

# Copy application code last (most likely to change)
COPY lib ./lib

# Compile TypeScript and resolve path aliases
RUN yarn tsc --project tsconfig.worker.json && \
    yarn tsc-alias -p tsconfig.worker.json

# Stage 5: Final production image
FROM base AS runner

# Copy production dependencies (rarely changes)
COPY --from=prod-deps --chown=worker:nodejs /app/node_modules ./node_modules

# Copy Prisma client files (changes when schema changes)
COPY --from=builder --chown=worker:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=worker:nodejs /app/node_modules/@prisma/client ./node_modules/@prisma/client

# Copy prisma schema for reference
COPY --chown=worker:nodejs prisma/schema.prisma ./prisma/schema.prisma

# Copy compiled application code (changes most frequently)
COPY --from=builder --chown=worker:nodejs /app/dist /app/dist

USER worker

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Health check - checks if the worker process is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD pgrep -f "graphile-worker" > /dev/null || exit 1

# Start the worker (paths are already resolved at build time)
CMD ["node", "--enable-source-maps", "dist/lib/jobs/worker.js"]