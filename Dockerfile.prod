# Multi-stage production build for Next.js with optimized layer caching

# Stage 1: Build dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files for yarn
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile

# Stage 2: Base runtime image with system dependencies
FROM node:20-alpine AS base
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Install tini for proper signal handling and create user
RUN apk add --no-cache tini && \
    addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Install Prisma CLI for migrations (required for production)
RUN npm install -g prisma

# Create storage and tmp directories with correct permissions
RUN mkdir -p /app/storage/emails /app/storage/attachments /app/tmp /app/tmp/mbox-uploads && \
    chown -R nextjs:nodejs /app/storage /app/tmp

# Stage 3: Build application
FROM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy package files and configuration (less likely to change)
COPY package.json yarn.lock ./
COPY next.config.ts ./
COPY tsconfig.json ./
COPY postcss.config.mjs ./
COPY prisma ./prisma

# Generate Prisma Client
RUN yarn prisma generate

# Copy public assets (changes less frequently)
COPY public ./public

# Copy type definitions (changes less frequently)
COPY types ./types

# Copy application code (most likely to change)
COPY app ./app
COPY lib ./lib
COPY components ./components
COPY hooks ./hooks

# Build the Next.js application
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
RUN yarn build

# Stage 4: Final production image
FROM base AS runner

# Copy Next.js standalone output (includes node_modules for Next.js)
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./

# Copy static files (rarely changes after build)
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy Prisma files (changes when schema changes)
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/@prisma/client ./node_modules/@prisma/client

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"

CMD ["node", "server.js"]