// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailAccount {
  id          String   @id @default(cuid())
  email       String   @unique
  displayName String?
  provider    String   // "gmail", "imap", "archive"
  accessToken String?
  refreshToken String?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  
  // User relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Gmail-specific fields
  gmailId     String?  @unique
  
  // IMAP-specific fields
  imapHost    String?
  imapPort    Int?
  imapSecure  Boolean?
  imapUser    String?
  imapPass    String?
  
  emails      Email[]
  folders     Folder[]
  filterRules FilterRule[]
  settings    EmailAccountSettings?
  jobStatuses JobStatus[]
  failedSyncMessages FailedSyncMessage[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@map("email_accounts")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  path        String
  accountId   String
  account     EmailAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  gmailLabelId String?

  lastSyncId  String?  // IMAP: last UID, Gmail: historyId (only for _SYNC_STATE)

  emails      Email[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([accountId, path])
  @@map("folders")
}

model Email {
  id            String   @id @default(cuid())
  messageId     String
  threadId      String?
  
  // Basic email fields
  subject       String?
  from          String
  to            String
  cc            String?
  bcc           String?
  replyTo       String?
  date          DateTime
  
  // Content (removed - stored in EML files only)
  
  // Metadata
  hasAttachments Boolean  @default(false)
  isRead        Boolean  @default(false)
  isImportant   Boolean  @default(false)
  isSpam        Boolean  @default(false)
  isArchived    Boolean  @default(false)
  isDeleted     Boolean  @default(false)
  
  // Email classification
  category      String?  // "inbox", "sent", "drafts", "spam", "trash"
  labels        String?  // JSON array of labels
  
  // Auto-delete tracking
  markedForDeletion Boolean  @default(false) // For dry-run mode
  markedForDeletionAt DateTime? // When it was marked
  
  // Storage
  emlPath       String?  // Path to EML file
  size          Int?     // Size in bytes
  
  // Relations
  accountId     String
  account       EmailAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  folderId      String?
  folder        Folder?  @relation(fields: [folderId], references: [id])
  
  attachments   Attachment[]
  
  // Gmail-specific fields
  gmailId       String?
  gmailThreadId String?
  
  // Sync tracking
  syncedAt      DateTime? // When this email was last synced
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([accountId, messageId])
  @@index([accountId])
  @@index([messageId])
  @@index([date])
  @@index([isDeleted])
  @@index([threadId])
  @@index([accountId, folderId])
  @@index([accountId, date])
  @@index([syncedAt])
  @@map("emails")
}

model Attachment {
  id          String   @id @default(cuid())
  filename    String
  contentType String
  size        Int
  filePath    String   // Path to attachment file
  
  emailId     String
  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("attachments")
}

// New simplified job tracking table
model JobStatus {
  id          String   @id @default(cuid())
  accountId   String
  account     EmailAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  jobType     String   // "sync", "auto_delete", "mbox_import"

  // Simple execution tracking
  lastRunAt   DateTime?
  success     Boolean  @default(false)
  error       String?  @db.Text

  // Optional metadata for UI display
  metadata    Json?    // { emailsProcessed: 150, duration: 5000, etc. }

  updatedAt   DateTime @updatedAt

  @@unique([accountId, jobType])
  @@index([accountId])
  @@map("job_status")
}

model FilterRule {
  id          String   @id @default(cuid())
  name        String
  accountId   String
  account     EmailAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  // Rule conditions (JSON)
  conditions  String   // JSON object with conditions
  
  // Rule actions
  action      String   // "delete", "archive", "label", "move"
  actionValue String?  // Target folder, label, etc.
  
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("filter_rules")
}

model EmailAccountSettings {
  id          String   @id @default(cuid())
  accountId   String   @unique
  account     EmailAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Sync frequency settings
  syncFrequency    String   @default("manual") // Cron expression (e.g. "0 * * * *" for hourly) or "manual"
  syncPaused       Boolean  @default(false)

  // Auto-delete configuration
  autoDeleteMode        String   @default("off") // "off", "dry-run", "on"
  deleteDelayHours      Int?     // Hours after import before deletion
  deleteAgeMonths       Int?     // Delete emails older than X months
  deleteOnlyArchived    Boolean  @default(true)
  currentDryRunJobId    String?  // ID of the current dry-run job

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_account_settings")
}

// Temporary table for tracking failed sync messages
model FailedSyncMessage {
  id            String   @id @default(cuid())
  accountId     String
  account       EmailAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  messageId     String   // Gmail message ID that failed
  failureReason String?  @db.Text
  attemptedAt   DateTime @default(now())

  @@index([accountId])
  @@index([messageId])
  @@map("failed_sync_messages")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  emailAccounts EmailAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}